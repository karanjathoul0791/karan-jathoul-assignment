{"version":3,"sources":["Components/checkBox.jsx","Components/textBox.jsx","Components/radioGroup.jsx","Components/cityList.jsx","App.js","reportWebVitals.js","index.js"],"names":["CheckBox","label","onChange","checked","className","type","name","id","value","htmlFor","TextBox","placeholder","onSubmit","useState","setValue","e","target","onClick","RadioGroup","cities","selectCity","selectAll","checkAll","addCity","selected","map","city","CityList","setCities","setCheckAll","useEffect","flag","Fragment","updatedCity","i","prevState","newState","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae3f3f8b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction CheckBox({ label, onChange, checked }) {\r\n  return (\r\n    <div className=\"form-check\">\r\n      <input\r\n        className=\"form-check-input\"\r\n        type=\"checkbox\"\r\n        name={label}\r\n        id={label}\r\n        value={label}\r\n        onChange={onChange}\r\n        checked={checked}\r\n      />\r\n      <label className=\"form-check-label\" htmlFor={label}>\r\n        {label}\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckBox;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TextBox({ label, placeholder, onSubmit }) {\r\n  const [value, setValue] = useState(\"\");\r\n  const addCity = () => {\r\n    if (value) {\r\n      onSubmit(value);\r\n    }\r\n    setValue(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-group mb-3\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder={placeholder}\r\n        aria-label={placeholder}\r\n        value={value}\r\n        name={label}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        aria-describedby=\"button-addon\"\r\n      />\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        type=\"button\"\r\n        id=\"button-addon\"\r\n        onClick={addCity}\r\n      >\r\n        {label}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextBox;\r\n","import React, { useState } from \"react\";\r\nimport CheckBox from \"./checkBox\";\r\nimport TextBox from \"./textBox\";\r\n\r\nfunction RadioGroup({ cities, selectCity, selectAll, checkAll, addCity }) {\r\n  return (\r\n    <form>\r\n      <TextBox label=\"Add City\" placeholder=\"City Name\" onSubmit={addCity} />\r\n\r\n      <CheckBox\r\n        label={checkAll.name}\r\n        onChange={(e) => selectAll(e.target.checked)}\r\n        key={checkAll.name}\r\n        checked={checkAll.selected}\r\n      />\r\n      {cities.map((city) => (\r\n        <CheckBox\r\n          label={city.name}\r\n          onChange={(e) => selectCity(e.target.checked, city)}\r\n          key={city.name}\r\n          checked={city.selected}\r\n        />\r\n      ))}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default RadioGroup;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport RadioGroup from \"./radioGroup\";\r\n\r\nfunction CityList() {\r\n  const [cities, setCities] = useState([\r\n    { name: \"Chennai\", selected: false },\r\n    { name: \"Bangalore\", selected: false },\r\n    { name: \"Mumbai\", selected: false },\r\n  ]);\r\n  const [checkAll, setCheckAll] = useState({\r\n    name: \"Select All\",\r\n    selected: false,\r\n  });\r\n\r\n  const selectAll = (checked) => {\r\n    setCheckAll({ ...checkAll, selected: checked });\r\n    setCities(function (prevState) {\r\n      const newState = [...prevState];\r\n      for (let i of newState) i.selected = checked;\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  const selectCity = (checked, city) => {\r\n    const updatedCity = cities.map((i) =>\r\n      i.name === city.name ? { ...city, selected: checked } : i\r\n    );\r\n    setCities(updatedCity);\r\n  };\r\n\r\n  const addCity = (city) => {\r\n    setCities((prevState) => {\r\n      const newState = [...prevState];\r\n      newState.push({ name: city, selected: false });\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  useEffect(\r\n    function () {\r\n      let flag = true;\r\n      for (let i of cities) if (!i.selected) flag = false;\r\n      setCheckAll({ ...checkAll, selected: flag });\r\n    },\r\n    [cities]\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <RadioGroup\r\n        cities={cities}\r\n        selectCity={selectCity}\r\n        selectAll={selectAll}\r\n        checkAll={checkAll}\r\n        addCity={addCity}\r\n      />\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default CityList;\r\n","import './App.css';\nimport CityList from './Components/cityList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CityList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}